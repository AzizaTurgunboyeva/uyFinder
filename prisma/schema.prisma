

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Usertype {
STUDENT
GUEST
}


model Admin {
  id        Int      @id @default(autoincrement())
  fullname  String
  phone     String
  email     String @unique
  password  String
  is_active Boolean @default(true)
  hashToken String?
  is_creator Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  @@map("admin")

}

model Seller {
  id             Int             @id @default(autoincrement())
  fullname       String
  email          String @unique
  phone          String
  hashedPassword String
  activation_link String?
  is_active       Boolean        @default(false)
  hashToken      String?
  createdAt      DateTime        @default(now())
  rentalLists    RentalList[]
  sellerActivities SellerActivity[]
 
  
  @@map("seller")

}

model SellerActivity {
  id        Int      @id @default(autoincrement())
  sellerId  Int
  action    String
  homeId    Int
  seller    Seller   @relation(fields: [sellerId], references: [id])
  rentallist RentalList @relation(fields: [homeId],references: [id])
    createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  @@map("seller-activity")

}

model Complaint {
  id        Int      @id @default(autoincrement())
  rentallistId  Int
  userId    Int
  reason    String
  isSolved  Boolean  @default(false)
  createdAt DateTime @default(now())

  rentallist    RentalList   @relation(fields: [rentallistId], references: [id])
  user User @relation(fields: [userId],references: [id])
  @@map("complaint")

}

model District {
  id          Int          @id @default(autoincrement())
  regionId    Int
  name        String
  region      Region       @relation(fields: [regionId], references: [id])
    createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  rentalLists RentalList[]
  @@map("district")

}

model Region {
  id        Int          @id @default(autoincrement())
  name      String
  createdAt    DateTime @default(now())
  districts District[]
  @@map("region")

}

model RentalList {
  id                Int             @id @default(autoincrement())
  sellerId          Int
  districtId        Int
  address           String
  rent              Decimal
  description       String
  accommodationType String
  furnished         Boolean
  amenitiesId       Int?
  categoryId        Int?
  location          String
  nearUniversityId  Int?
  type String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  nearUniversity    University? @relation(fields: [nearUniversityId], references: [id])
  seller            Seller          @relation(fields: [sellerId], references: [id])
  district          District        @relation(fields: [districtId], references: [id])
  images            Image[]
  rentalAmenities   RentalAmenities[]
  bookings          Booking[]
  complaints Complaint[]
  selleractivity SellerActivity[]
  categories Category[]
  reviews Review[]
  favourites Favorite[]
  @@map("rental-list")

}

model Image {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  uploadedBy DateTime @default(now())
  homeId    Int
  isMainImage Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  rentalList RentalList @relation(fields: [homeId], references: [id])
 
  @@map("image")

}

model RentalAmenities {
  rentallistId Int
  amenityId    Int

  rentalList   RentalList @relation(fields: [rentallistId], references: [id])
  amenity      Amenity    @relation(fields: [amenityId], references: [id])

  @@id([rentallistId, amenityId])
  @@map("rentalamenities")
}

model Amenity {
  id              Int               @id @default(autoincrement())
  name            String
  includedInRent  Boolean
  additionalCost  Decimal?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  rentalAmenities RentalAmenities[]
  @@map("amenity")

}

model Category {
  id        Int          @id @default(autoincrement())
  name      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  rentalLists RentalList[]
  
  @@map("category")

}

model Booking {
  id        Int      @id @default(autoincrement())
  userId    Int
  rentalId  Int
  startDate String
  endDate   String
  status    String
  createdAt DateTime @default(now())
  rentalList RentalList @relation(fields: [rentalId], references: [id])
  users User @relation(fields: [userId],references: [id])
  @@map("booking")

}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  homeId    Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  users User @relation(fields: [userId],references: [id])
  rentallist RentalList @relation(fields: [homeId],references: [id])
  @@map("review")

}

model User {
  id             Int              @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String @unique 
  phone          String
  hashedPassword String
  hashToken      String?
  is_active       Boolean       @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userType       Usertype
  userPreferences UserPreferences[]
  favorites      Favorite[]
  bookings       Booking[]
  reviews        Review[]
  complaints Complaint[]
  @@map("user")
  
}

model UserPreferences {
  id                Int       @id @default(autoincrement())
  userId            Int
  rentMin           Decimal?
  rentMax           Decimal?
  accommodationType String?
  preferredLocation String?
  furnished         Boolean?
  roomType          String?
  distanceTo        Int?
  nearTransportation String
  createdAt    DateTime @default(now())
  user              User      @relation(fields: [userId], references: [id])
  @@map("user-preferences")
}

model Favorite {
  id           Int        @id @default(autoincrement())
  userId       Int
  rentallistId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id])
  rentallist   RentalList @relation(fields: [rentallistId], references: [id])
  @@map("favorite")
}

model University {
  id           Int     @id @default(autoincrement())
  name         String
 location String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  rentalLists  RentalList[]
  @@map("university")

}